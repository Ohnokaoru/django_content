*環境:創建一最外層資料夾，之後皆在裡面動作

1.建立虛擬環境: 
- Ctrl+shift+p
- 選擇Python:Create Environment
- 選擇:Venv Creates
- 選擇:python版本 #Terminal每次下指令會看見(.venv)

2.安裝套件:
- Terminal:pip list #目前有哪些套件
- Terminal:pip install pipenv
- Terminal:pipenv shell
- Terminal:pipenv install django #安裝Django

3.建立Django專案與功能app:
- django-admin startproject 專案名稱(ex:potrip) . #單純建立一個專案名資料夾(如果有 .:建立一個資料夾與其同名專案資料夾)
- python manage.py startapp 功能app(ex:app01)
        資料:- migrations:記錄資料庫與models.py中的欄位同步歷程。
         - __init__.py:這個檔案顯示了Django的每個應用程式(APP)，事實上就是Python套件(Package)。
         - admin.py:可以用來定義或客製化這個應用程式(APP)在Django後台(Django Administration)的欄位顯示方式。
         - apps.py:這個Django應用程式的設定檔。
         - models.py:定義Django應用程式的資料庫欄位。
         - tests.py:能夠撰寫Django應用程式的自動化測試腳本。
         - views.py:負責接收瀏覽器的請求，進行邏輯的處理後，回傳執行結果給瀏覽器。
         
4.基本設定:
- 新增最外層templates 資料夾: md templates
- 新增最外層static 資料夾: md static
- settings:
        - 新增:import os
        - INSTALLED_APPS新增:"功能app"
        - TEMPLATES新增:os.path.join(BASE_DIR,"templates")
        - LANGUAGE_CODE更改:"zh-hant"
        - TIME_ZONE更改:"Asia/Taipei"
        - 新增STATICFILES_DIRS=[os.path.join(BASE_DIR,"static")]

5.新增與更新遷移是資料庫: #一旦models.py有變更就要更新
- (如果有在Terminal用Git控管，已下git init):在與專案同一層中新增.gitignore，並加入db.sqlite3，再下git add . 與git commit -am "要寫的訊息" #將db.sqlite3加入為控管
- Terminal:python manage.py makemigrations
- Terminal:python manage.py migrate

6.加入bat
- 在與專案同一層中新增a.bat，內容為python manage.py runserver #打開網頁:ctrl+滑鼠左鍵

--------------------------------------------------------------------
*如果向上傳github:
- github手動建資料庫
- vscode Terminal:git remote add origin 倉庫網址
- vscode Terminal:git remote -v #顯示綁地雲端網址
- vscode Terminal:git push
- vscode Terminal:git push --set-upstream origin master
--------------------------------------------------------------------

7.建立超級使用者:
- python manage.py createsuperuser

*app01功能: #一般管理者或員工可經由/admin進入後台
8.建立register、login與logout:
- register:
    - 內建UserCreationForm做填入、自動驗證與儲存:
        - UserCreationForm(request.POST) #提交，抓取已填入資料 
        - .is_vaild() #是否為有效form
        - .save() #儲存

- login:
    - 抓取表單內容做認證:
        - request.POST.get() #抓取已提交內容
        - user=authenticate(request,username=...,password=...) #將資料與User model做比對，並回傳User object
        - login(request, user) #將含有用戶請求數據的request與User object給login()

- login:
    - 登出數據:
        - logout(request)


#以下是依照需求而建立:

*templates/base.html: #共用模板
    - {% block 名 %}內容{% endblock %}
    - {% load static %} #載入靜態網頁
    - <link rel="stylesheet" href="{% static 'css/style.css' %}"> #引用靜態網頁
    

*app02功能:
建立註冊後的userprofile的model、admin與form:
- UserProfile建立model: #自定義資料表欄位
    - from django.contrib.auth.models import User #取得內建User model
    - class UserProfile(models.Model) #繼承models.Model，以使用其功能
    - user=models.OneToOneField(User,on_delete=models.CASCADE,unique=True) #建立一對一關聯的外鍵，(to_field="User指定關聯的欄位")。user實際上為User的id
    - def __str__(self) #如果沒設定，後台只會看到UserProfile object
    - python manage.py makemigrations
    - python manage.py migrate

- UserProfile建立admin: #在Django adminy介面中展示和管理
    - from .models import UserProfile #引入model
    - class UserProfileAdmin(admin.ModelAdmin) #繼承後，添加一些需要的管理，內容用list或tuple
    - admin.site.register(UserProfile, UserProfileAdmin) #註冊


- UserProfile建立form:
    - 建立form.py
    - class UserProfile(forms.ModelForm)與class Meta: #設計關聯model與其欄位配置
    - 到views.py寫邏輯
    - 新增UserprofileForm.html與內容:
        -<label for="{{ form.customername.id_for_label }}">姓名</label><br>
         {{ form.customername }}<br>
        #上兩行等同於下兩行
         <label for="customername">姓名</label><br>
         <input type="text" name="customername" id="customername">
        

    

    
    